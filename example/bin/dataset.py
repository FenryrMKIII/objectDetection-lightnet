import copy
import logging
from PIL import Image
import torch
from torchvision import transforms as tf
import brambox as bb
import lightnet as ln

__all__ = ['VOCDataset']
log = logging.getLogger('lightnet.VOC.dataset')

def identify_file(img_id):
    return f'data/VOCdevkit/{img_id}.jpg'

class VOCDataset(ln.models.BramboxDataset):
    """ Pascal VOC dataset, with annotations generated by `brambox.io.parser.box.PandasParser`

    Args:
        params (lightnet.engine.HyperParameters): Hyperparameters for this data (See Note)
        kwargs (optional): extra keyword arguments to pass on to the `brambox.io.load()` function

    Note:
        The hyperparameters object should at least contain the following attributes:

        - params.input_dimension (tuple): tuple containing base (width,height) for the network
        - params.class_label_map (list): List of class_labels (can be **None**, but this might lead to undeterministic behaviour)
        - params.anno_filter (str, optional): How to filter difficult annotations: ['ignore', 'rm', 'none']; Default **'none'**
        - params.flip (float): chance to flip the image
        - params.jitter (float): jitter percentage
        - params.hue (float): Hue change percentage
        - params.saturation (float): Saturation change percentage
        - params.value (float): Value change percentage
    """
    def __init__(self, params, **kwargs):
        super().__init__(annos, params.input_dimension, params.class_label_map, identify_file, img_tf, anno_tf)
